// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectV2.Data;

#nullable disable

namespace ProjectV2.Migrations
{
    [DbContext(typeof(RentalCompanyContext))]
    [Migration("20230613190839_CarMigration")]
    partial class CarMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectV2.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ProjectV2.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<DateTime?>("DateOfCorruption")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfProduction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfRepair")
                        .HasColumnType("datetime2");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlannedDateOfRepair")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProducentId")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("ProducentId");

                    b.ToTable("Car");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjectV2.Models.CarState", b =>
                {
                    b.Property<int>("CarStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarStateId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CarStateId");

                    b.HasIndex("CarId");

                    b.HasIndex("StateId");

                    b.ToTable("CarState");
                });

            modelBuilder.Entity("ProjectV2.Models.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<int>("ClientAddressAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.HasIndex("ClientAddressAddressId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ProjectV2.Models.ClientRental", b =>
                {
                    b.Property<int>("ClientRentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientRentalId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRental")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("ClientRentalId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RentalId");

                    b.ToTable("ClientRental");
                });

            modelBuilder.Entity("ProjectV2.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaidenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.Property<int>("Seniority")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("RentalId");

                    b.ToTable("Employee");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjectV2.Models.EmployeeRental", b =>
                {
                    b.Property<int>("EmployeeRentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeRentalId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeRentalId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RentalId");

                    b.ToTable("EmployeeRental");
                });

            modelBuilder.Entity("ProjectV2.Models.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ClosingHour")
                        .HasColumnType("int");

                    b.Property<int>("OpeningHour")
                        .HasColumnType("int");

                    b.HasKey("InstitutionId");

                    b.HasIndex("AddressId");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("ProjectV2.Models.Producent", b =>
                {
                    b.Property<int>("ProducentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducentId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProducentId");

                    b.ToTable("Producent");
                });

            modelBuilder.Entity("ProjectV2.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRental")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("paymentType")
                        .HasColumnType("int");

                    b.HasKey("RentalId");

                    b.HasIndex("CarId");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<DateTime>("DateOfDamage")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRepair")
                        .HasColumnType("datetime2");

                    b.HasKey("StateId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("ProjectV2.Models.ElectricCar", b =>
                {
                    b.HasBaseType("ProjectV2.Models.Car");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.ToTable("ElectricCar");
                });

            modelBuilder.Entity("ProjectV2.Models.SportsCar", b =>
                {
                    b.HasBaseType("ProjectV2.Models.Car");

                    b.Property<decimal>("AdditionalFee")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("VMax")
                        .HasColumnType("int");

                    b.ToTable("SportsCar");
                });

            modelBuilder.Entity("ProjectV2.Models.TruckCar", b =>
                {
                    b.HasBaseType("ProjectV2.Models.Car");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("TruckCar");
                });

            modelBuilder.Entity("ProjectV2.Models.DeliveryEmployee", b =>
                {
                    b.HasBaseType("ProjectV2.Models.Employee");

                    b.Property<string>("DrivingLicenceCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DeliveryEmployee");
                });

            modelBuilder.Entity("ProjectV2.Models.Manager", b =>
                {
                    b.HasBaseType("ProjectV2.Models.Employee");

                    b.Property<DateTime>("DateOfPromotion")
                        .HasColumnType("datetime2");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("ProjectV2.Models.Mechanic", b =>
                {
                    b.HasBaseType("ProjectV2.Models.Employee");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Mechanic");
                });

            modelBuilder.Entity("ProjectV2.Models.RegisteryEmployee", b =>
                {
                    b.HasBaseType("ProjectV2.Models.Employee");

                    b.Property<string>("NativeLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RegisteryEmployee");
                });

            modelBuilder.Entity("ProjectV2.Models.ElectricSportsCar", b =>
                {
                    b.HasBaseType("ProjectV2.Models.ElectricCar");

                    b.Property<decimal>("AdditionalFee")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("VMax")
                        .HasColumnType("int");

                    b.ToTable("ElectricSportsCar");
                });

            modelBuilder.Entity("ProjectV2.Models.Car", b =>
                {
                    b.HasOne("ProjectV2.Models.Producent", "Producent")
                        .WithMany("Cars")
                        .HasForeignKey("ProducentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Producent");
                });

            modelBuilder.Entity("ProjectV2.Models.CarState", b =>
                {
                    b.HasOne("ProjectV2.Models.Car", "Car")
                        .WithMany("CarStates")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("State", "State")
                        .WithMany("CarStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ProjectV2.Models.Client", b =>
                {
                    b.HasOne("ProjectV2.Models.Address", "ClientAddress")
                        .WithMany()
                        .HasForeignKey("ClientAddressAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientAddress");
                });

            modelBuilder.Entity("ProjectV2.Models.ClientRental", b =>
                {
                    b.HasOne("ProjectV2.Models.Client", "Client")
                        .WithMany("ClientRentals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectV2.Models.Rental", "Rental")
                        .WithMany("ClientRentals")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ProjectV2.Models.Employee", b =>
                {
                    b.HasOne("ProjectV2.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectV2.Models.Institution", "Institution")
                        .WithMany("Employees")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectV2.Models.Rental", "Rental")
                        .WithMany("Employees")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Institution");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ProjectV2.Models.EmployeeRental", b =>
                {
                    b.HasOne("ProjectV2.Models.Employee", "Employee")
                        .WithMany("EmployeeRentals")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectV2.Models.Rental", "Rental")
                        .WithMany("EmployeeRentals")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("ProjectV2.Models.Institution", b =>
                {
                    b.HasOne("ProjectV2.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ProjectV2.Models.Rental", b =>
                {
                    b.HasOne("ProjectV2.Models.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("ProjectV2.Models.ElectricCar", b =>
                {
                    b.HasOne("ProjectV2.Models.Car", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.ElectricCar", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.SportsCar", b =>
                {
                    b.HasOne("ProjectV2.Models.Car", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.SportsCar", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.TruckCar", b =>
                {
                    b.HasOne("ProjectV2.Models.Car", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.TruckCar", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.DeliveryEmployee", b =>
                {
                    b.HasOne("ProjectV2.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.DeliveryEmployee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.Manager", b =>
                {
                    b.HasOne("ProjectV2.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.Manager", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.Mechanic", b =>
                {
                    b.HasOne("ProjectV2.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.Mechanic", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.RegisteryEmployee", b =>
                {
                    b.HasOne("ProjectV2.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.RegisteryEmployee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.ElectricSportsCar", b =>
                {
                    b.HasOne("ProjectV2.Models.ElectricCar", null)
                        .WithOne()
                        .HasForeignKey("ProjectV2.Models.ElectricSportsCar", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectV2.Models.Car", b =>
                {
                    b.Navigation("CarStates");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("ProjectV2.Models.Client", b =>
                {
                    b.Navigation("ClientRentals");
                });

            modelBuilder.Entity("ProjectV2.Models.Employee", b =>
                {
                    b.Navigation("EmployeeRentals");
                });

            modelBuilder.Entity("ProjectV2.Models.Institution", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ProjectV2.Models.Producent", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("ProjectV2.Models.Rental", b =>
                {
                    b.Navigation("ClientRentals");

                    b.Navigation("EmployeeRentals");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.Navigation("CarStates");
                });
#pragma warning restore 612, 618
        }
    }
}
